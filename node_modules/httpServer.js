/***********************************************************

@name: http服务器
@lastChangeTime: 2014-04-12
@version: 1.0.1

现功能:
	路由选择,
	文件类型检测,
	404错误处理,
	ico请求处理,
	
等待后续追加的功能：
	服务器日志: 需要记录一些访问信息,
	动态脚本解析: 类似php
	支持自定义配置信息

__dirname 当前脚本文件所在路径;

***********************************************************/

var core_url = require('url'),
	core_path = require('path'),
	core_fs = require('fs'),
	filePostArr = {
		'1':['js','css','txt','json','html','xml'],
		'2':['jpg','jpeg','png','gif','ico']
	},
	types = {
		//文本
		"css": "text/css",
		"html": "text/html",
		"json": "application/json",
		"js": "text/javascript",
		"txt": "text/plain",
		"xml": "text/xml",
		//图片
		"ico": "image/x-icon",
		"gif": "image/gif",
		"jpeg": "image/jpeg",
		"jpg": "image/jpeg",
		"png": "image/png",
		//下载
		"rar": "application/octet-stream",
		"zip": "application/x-zip-compressed",
		"pdf": "application/pdf",
		"swf": "application/x-shockwave-flash"
		// "svg": "image/svg+xml",
		// "tiff": "image/tiff",
		// "wav": "audio/x-wav",
		// "wma": "audio/x-ms-wma",
		// "wmv": "video/x-ms-wmv",
	},
	rootServer;
core_path.normal = function(str){
	return core_path.normalize(str).replace(/\\/g,'/');
};

rootServer = function(root,writeLog){
	var root = root,
		writeLog,
		logs = [];
	if(!!writeLog && typeof writeLog === 'string' ){
		writeLog  = writeLog;
	}
	this.server =  function (request,response){

		if( !(this instanceof arguments.callee) ){
			return new arguments.callee(request,response);
		}
			//请求的对象
		var response = response,
			//返回的对象
			request = request,
			//来自web请求的完整链接
			cUrl = 'http://'+request.headers['host']+request.url,
			//web Url的路径 去除 ? 后面的字符串
			pageUrl = core_url.parse( cUrl ).pathname,
			//我们要访问的真实磁盘路径
			pathUrl,
			//文件的后缀对象：如果请求的是文件
			fp,
			_this = this;
		pathUrl = root+( pageUrl ? pageUrl.slice(1) : "" );
		//截取最后一位
		pathUrl.slice(-1)==='/' && ( pathUrl = pathUrl.slice(0,-1) );
		//标准化url
		pathUrl = core_path.normalize( pathUrl );

		_this.webRoot = root;
		_this.writeLog = writeLog;
		_this.core_fs = core_fs;
		_this.core_path = core_path;
		_this.core_url = core_url;
		_this.request = request;
		_this.response = response;
		_this.cUrl = cUrl;
		_this.pageUrl = pageUrl;
		_this.pathUrl = pathUrl;
		_this.fp = fp;
		_this.init();
	}
	this.server.prototype = {
		//初始化事情
		init: function(){
			//解析文件
			var me = this;
			me.core_fs.exists( me.pathUrl, function(flag){
				//获取路径状态 : 报错
				flag ? me.core_fs.stat( me.pathUrl, function(error,stat){
					me.fileStat(error,stat);
				} ) : me.showError() ;
			} );
		},
		//读取文件
		fileStat: function(error,stat){
			var	encoding,
				me = this,
				pathUrl = me.pathUrl;
			//读取文件
			if( stat.isFile() ){
				me.fp = me.getFileType();
				if( me.fp ){
					encoding = me.fp.type == 1 ? 'utf-8' : 'binary' ;
					me.core_fs.readFile( pathUrl, encoding, function(error,data){
						me.showFileCont(error,data);
					} );
				}
			//操作目录
			}else{
				me.core_fs.readdir( pathUrl, function(error,data){
					me.showFolderList(error,data);
				} );
			}
		},
		//读取文件内容
		showFileCont: function(error,data){
			var me = this,
				healdObj = {
					1: 'showText',
					2: 'showImg',
					3: 'showOrther'
				};
			me[ healdObj[ me.fp.type ] ](data);
			me.exit();
		},
		//展示文本内容
		showText: function(data){
			var me = this,
				headerType = getFileMime(me.fp.postfix);
			me.setHeader({
				'Content-Type': headerType
			});
			me.response.write(data);
		},
		//展示图片
		showImg: function(data){
			var me = this,
				headerType = getFileMime( me.fp.postfix );
			me.setHeader({
				'Content-Type': headerType
			});
			me.response.write(data,"binary");
		},
		//展示其他类型文件
		showOrther: function(data){
			var me = this,
				headerType = getFileMime( me.fp.postfix ),
				filename = me.core_path.basename( me.pathUrl );
			me.setHeader({
				'Content-type': headerType,
				'Content-Disposition': 'attachment; filename='+filename
			});
			me.response.write(data,"binary");
		},
		/**
			依据文件名进行判断
			return {
				type: 1.文本 2.图片 3.其他
				postfix: 后缀字符串
			}
		*/
		getFileType: function(){
			var me = this,
				postfix = me.core_path.extname(me.pathUrl),
				result,
				n;
			postfix && ( postfix = postfix.slice(1) );
			//有后缀
			if( postfix ){
				for(n in filePostArr){
					if( filePostArr[n].indexOf(postfix) !== -1){
						result = { type: n, postfix: postfix };
						break;
					}else{
						result = null;
					}
				}
			}
			//是文件,但是没有后缀信息
			if(result === undefined){
				me.showError();
				return false;
			}else{
				!result && ( result = {type:'3',postfix:postfix} );
			}
			return result;
		},
		//展示目录列表
		showFolderList: function(error,data){
			var htmlStr = "<h1>Node Http Server </h1>",
				i,
				j,
				me = this;
			me.setHeader({
				'Content-Type': 'text/html;charset=utf-8'
			});

			for(i=0,j=data.length;i<j;i++){
				if(me.core_path.extname(data[i])){
					htmlStr += '<p><a href="'+ me.core_path.normal(me.pageUrl+'/'+data[i]) +'">'+data[i]+'</a></p>';
				}else{
					htmlStr += '<p><a href="'+ me.core_path.normal(me.pageUrl+'/'+data[i]) +'">'+data[i]+'/</a></p>';
				}
			}
			me.response.write(htmlStr);
			me.exit();
		},
		//404
		showError: function(){
			var me = this,
				htmlStr;
			if(me.pageUrl.slice(-3) !== 'ico'){
				htmlStr = "<h1>Node Http Server</h1>";
				me.setHeader({
					'Content-Type': 'text/html'
				},404);
				htmlStr += '<p> 404 , <span style="color:red">'+ me.cUrl +'</span> Not Find</p>';
				me.response.write(htmlStr);
			}
			me.exit();
		},
		//结束访问
		exit: function(){
			var me = this,
				logPath;
			me.response.end();
			//这里可以添加log 
			if(!!me.writeLog){
				logPath = me.writelog();
			}
			//在做单词请求调试的时候打开
			// setTimeout(process.exit,1); 
		},
		// me.writeLog
		writelog: function(){},
		// function(){
		// 	var me = this,
		// 		defalutText = 'weblog.txt',
		// 		logPath,
		// 		extName;
		// 	logPath = me.core_path.normalize(
		// 		typeof me.writeLog === 'string' ?
		// 		me.core_path.join(me.webRoot,me.writeLog) :
		// 		me.webRoot );
		// 	//后缀
		// 	extName = me.core_path.extname(logPath);
		// 	//拼接最终log路径
		// 	!extName && (logPath = me.core_path.join(logPath,defalutText) );
		// 	logs.push( logPath ,me.cUrl );
		// 	if( !me.core_fs.exists(logPath) ){
		// 		me.core_fs.writeFile(logPath,'nodelog:\n','utf-8',function(err){
		// 			me.core_fs.appendFile(logPath,me.cUrl+' \n','utf-8');
		// 		});
		// 	}else{
		// 		me.core_fs.appendFile(logPath,me.cUrl+' \n','utf-8');
		// 	}
		// },
		//设置头部信息
		setHeader: function(options,code){
			var me = this,
				code = code || 200;
			me.response.writeHead(code,options);
		}
	}
}

//获取需要设置的头信息
function getFileMime(postfix){
	return types[postfix];
}

//必须制定路径
function configServer(root,writeLog){
	if(typeof root === 'string' && root){
		return new rootServer(root,writeLog).server;
	}else{
		console.log('fail, root is null');
	}
}

//开放api
module.exports = configServer;